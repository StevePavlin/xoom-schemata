# Schema Definitions

### Create Organization
POST http://localhost:9019/organizations
Content-Type: application/json

{
  "organizationId": "",
  "name": "Org3",
  "description": "My organization."
}

> {% client.global.set('orgId', response.body.organizationId) %}


### Create Unit
POST  http://localhost:9019/organizations/{{orgId}}/units
Content-Type: application/json

{
  "organizationId": "{{orgId}}",
  "unitId": "",
  "name": "Unit3",
  "description": "My unit."
}

> {% client.global.set('unitId', response.body.unitId) %}

### Create Context
POST http://localhost:9019/organizations/{{orgId}}/units/{{unitId}}/contexts
Content-Type: application/json

{
  "organizationId": "{{orgId}}",
  "unitId": "{{unitId}}",
  "contextId": "",
  "namespace": "io.vlingo.schemata5",
  "description": "Schemata Context."
}

> {% client.global.set('contextId', response.body.contextId) %}

### Create Schema
POST http://localhost:9019/organizations/{{orgId}}/units/{{unitId}}/contexts/{{contextId}}/schemas
Content-Type: application/json

{
  "organizationId": "{{orgId}}",
  "unitId": "{{unitId}}",
  "contextId": "{{contextId}}",
  "schemaId": "",
  "category": "Event",
  "name": "SchemaDefinedFoo",
  "scope": "Private",
  "description": "Schemata was defined event."
}

> {% client.global.set('schemaId', response.body.schemaId) %}

<> 2019-09-13T105524.201.txt
<> 2019-09-13T105508.201.txt
<> 2019-09-13T105413.201.txt

### Create Schema Version
POST http://localhost:9019/organizations/{{orgId}}/units/{{unitId}}/contexts/{{contextId}}/schemas/{{schemaId}}/versions
Content-Type: application/json

{
  "organizationId": "{{orgId}}",
  "unitId": "{{unitId}}",
  "contextId": "{{contextId}}",
  "schemaId": "{{schemaId}}",
  "schemaVersionId": "",
  "description": "Initial revision.",
  "specification": "event SchemaDefined { type eventType }",
  "status": "Published",
  "previousVersion": "0.0.0",
  "currentVersion": "1.0.0"
}
> {% client.global.set('schemaVersionId', response.body.schemaVersionId) %}

### Publish Schema Version
PATCH http://localhost:9019/organizations/{{orgId}}/units/{{unitId}}/contexts/{{contextId}}/schemas/{{schemaId}}/versions/{{schemaVersionId}}/status

'Published'


### Create second schema version
POST http://localhost:9019/organizations/{{orgId}}/units/{{unitId}}/contexts/{{contextId}}/schemas/{{schemaId}}/versions
Content-Type: application/json

{
  "organizationId": "{{orgId}}",
  "unitId": "{{unitId}}",
  "contextId": "{{contextId}}",
  "schemaId": "{{schemaId}}",
  "schemaVersionId": "",
  "description": "Updated revision.",
  "specification": "event SchemaDefined2 { type eventType }",
  "status": "Published",
  "previousVersion": "1.0.0",
  "currentVersion": "1.0.1"
}
> {% client.global.set('schemaVersion2Id', response.body.schemaVersionId) %}


###
# Schema Queries

### Units of Organisation
GET http://localhost:9019/organizations/{{orgId}}/units
Accept: application/json

### Contexts of Unit
GET http://localhost:9019/organizations/{{orgId}}/units/{{unitId}}/contexts
Accept: application/json

### Schemata of Context
GET http://localhost:9019/organizations/{{orgId}}/units/{{unitId}}/contexts/{{contextId}}/schemas
Accept: application/json

### Schema Versions of Schema
GET http://localhost:9019/organizations/{{orgId}}/units/{{unitId}}/contexts/{{contextId}}/schemas/{{schemaId}}/versions
Accept: application/json

### Categories
GET http://localhost:9019/schema/categories
Accept: application/json

### Search for first schema version by names
GET http://localhost:9019/versions/search?organization=Org3&unit=Unit3&context=io.vlingo.schemata5&schema=SchemaDefinedFoo&version=1.0.0
Accept: application/json

### Search for second schema version by names
GET http://localhost:9019/versions/search?organization=Org3&unit=Unit3&context=io.vlingo.schemata5&schema=SchemaDefinedFoo&version=1.0.1
Accept: application/json

### Search for all schema versions by names
GET http://localhost:9019/versions/search?organization=Org3&unit=Unit3&context=io.vlingo.schemata5&schema=SchemaDefinedFoo
Accept: application/json

### Search for all schema versions by names


###

// Reproduce https://github.com/vlingo/vlingo-schemata/issues/98
POST http://localhost:9019/organizations
Content-Type: application/json

{
  "organizationId": "",
  "name": "Org",
  "description": "My organization."
}
> {% client.global.set('orgId', response.body.organizationId) %}


### Create Unit
POST  http://localhost:9019/organizations/{{orgId}}/units
Content-Type: application/json

{
  "organizationId": "{{orgId}}",
  "unitId": "",
  "name": "Unit",
  "description": "My unit."
}

> {% client.global.set('unitId', response.body.unitId) %}

### Create Context
POST http://localhost:9019/organizations/{{orgId}}/units/{{unitId}}/contexts
Content-Type: application/json

{
  "organizationId": "{{orgId}}",
  "unitId": "{{unitId}}",
  "contextId": "",
  "namespace": "Context",
  "description": "Schemata Context."
}

> {% client.global.set('contextId', response.body.contextId) %}

### Create Schema
POST http://localhost:9019/organizations/{{orgId}}/units/{{unitId}}/contexts/{{contextId}}/schemas
Content-Type: application/json

{
  "organizationId": "{{orgId}}",
  "unitId": "{{unitId}}",
  "contextId": "{{contextId}}",
  "schemaId": "",
  "category": "Event",
  "name": "Schema",
  "scope": "Private",
  "description": "Schemata was defined event."
}

> {% client.global.set('schemaId', response.body.schemaId) %}


### Create Schema Version
POST http://localhost:9019/organizations/{{orgId}}/units/{{unitId}}/contexts/{{contextId}}/schemas/{{schemaId}}/versions
Content-Type: application/json

{
  "organizationId": "{{orgId}}",
  "unitId": "{{unitId}}",
  "contextId": "{{contextId}}",
  "schemaId": "{{schemaId}}",
  "schemaVersionId": "",
  "description": "Initial revision.",
  "specification": "event SchemaDefined { string foo }",
  "status": "Published",
  "previousVersion": "0.0.0",
  "currentVersion": "1.0.0"
}
> {% client.global.set('schemaVersionId', response.body.schemaVersionId) %}



### this makes the server hang
GET http://localhost:9019/code/Org:Unit:Context:Schema:1.0.0/java
Accept: application/json

###
